package main

import (
	"log"
	"net/http"
	"time"
)

// result type.
type result struct {
	url     string
	err     error
	latency time.Duration
}
// get just curl a websites.
// pass the channel as a paramenter, within the result type it is possible to store the error.
func get(url string, ch chan<- result) {
	start := time.Now()
	if resp, err := http.Get(url); err != nil {
		// no calculation
		ch <- result{url, err, 0}
	} else {
		t := time.Since(start).Round(time.Millisecond)
		ch <- result{url, err, t}
		resp.Body.Close()
	}
}

func main() {
	results := make(chan result)
	list := []string{
		"https://amazon.de",
		"https://google.de",
		"https://nytimes.com",
		"https://amazon.de",
		"https://google.de",
		"https://nytimes.com",
	}
	// number of websites equal number of go routines equal number of elements in the channel
	for _, url := range list {
		go get(url, results)
	}
	for range list {
		// the channel will block if there is no data to read
		r := <-results
		if nil != r.err {
			log.Printf("%-20s %s\n", r.url, r.latency)
		} else {
			log.Printf("%-20s %s\n", r.url, r.latency)
		}
	}
}
