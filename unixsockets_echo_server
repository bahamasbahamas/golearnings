package main

import (
	"io"
	"log"
	"net"
	"os"
)

const SockAddr = "/tmp/echo.sock"

func echoServer(c net.Conn) {
	log.Printf("Client connected [%s]", c.RemoteAddr().Network())
	io.Copy(c, c)
	err := c.Close()
	if err != nil {
		panic(err)
	}
}

func main() {
	// When servers shut down, the file representing the socket can remain in the file system unless the server
	// did orderly cleanup after itself. If we re-run another server with the same socket path, we may get an error
	// To prevent that, the server begins by removing the socket file, if it exists.
	if err := os.RemoveAll(SockAddr); err != nil {
		log.Fatal(err)
	}

	l, err := net.Listen("unix", SockAddr)
	if err != nil {
		log.Fatal("listen error:", err)
	}
	defer l.Close()

	for {
		// Accept new connections, dispatching them to echoServer
		// in a goroutine.
		conn, err := l.Accept()
		if err != nil {
			log.Panic("accept error:", err)
		}
		go echoServer(conn)
	}
}
